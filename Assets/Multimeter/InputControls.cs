//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Multimeter/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""ScrollMap"",
            ""id"": ""827e13a5-de73-4d9b-878d-119c8d600432"",
            ""actions"": [
                {
                    ""name"": ""ScrollAction"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2cd1c2cc-ed3e-48a0-bfbf-3ec51e093264"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e25eb6a3-471b-4582-bde6-a34e884f373b"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse control scheme"",
                    ""action"": ""ScrollAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse control scheme"",
            ""bindingGroup"": ""Mouse control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ScrollMap
        m_ScrollMap = asset.FindActionMap("ScrollMap", throwIfNotFound: true);
        m_ScrollMap_ScrollAction = m_ScrollMap.FindAction("ScrollAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ScrollMap
    private readonly InputActionMap m_ScrollMap;
    private IScrollMapActions m_ScrollMapActionsCallbackInterface;
    private readonly InputAction m_ScrollMap_ScrollAction;
    public struct ScrollMapActions
    {
        private @InputControls m_Wrapper;
        public ScrollMapActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScrollAction => m_Wrapper.m_ScrollMap_ScrollAction;
        public InputActionMap Get() { return m_Wrapper.m_ScrollMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ScrollMapActions set) { return set.Get(); }
        public void SetCallbacks(IScrollMapActions instance)
        {
            if (m_Wrapper.m_ScrollMapActionsCallbackInterface != null)
            {
                @ScrollAction.started -= m_Wrapper.m_ScrollMapActionsCallbackInterface.OnScrollAction;
                @ScrollAction.performed -= m_Wrapper.m_ScrollMapActionsCallbackInterface.OnScrollAction;
                @ScrollAction.canceled -= m_Wrapper.m_ScrollMapActionsCallbackInterface.OnScrollAction;
            }
            m_Wrapper.m_ScrollMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ScrollAction.started += instance.OnScrollAction;
                @ScrollAction.performed += instance.OnScrollAction;
                @ScrollAction.canceled += instance.OnScrollAction;
            }
        }
    }
    public ScrollMapActions @ScrollMap => new ScrollMapActions(this);
    private int m_MousecontrolschemeSchemeIndex = -1;
    public InputControlScheme MousecontrolschemeScheme
    {
        get
        {
            if (m_MousecontrolschemeSchemeIndex == -1) m_MousecontrolschemeSchemeIndex = asset.FindControlSchemeIndex("Mouse control scheme");
            return asset.controlSchemes[m_MousecontrolschemeSchemeIndex];
        }
    }
    public interface IScrollMapActions
    {
        void OnScrollAction(InputAction.CallbackContext context);
    }
}
